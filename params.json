{
  "name": "Monetary MobileToken Android Library",
  "tagline": "",
  "body": "# Getting started with MobileToken for Android\r\n\r\n###Add MonetaryMobileToken.aar to your Android (Gradle) project\r\n1. Place MonetaryMobileToken.aar in the `libs` folder of your app.\r\n2. Ensure `libs` folder is included in `flatDir` repositories in your app's build.gradle file.\r\n\r\n    ```\r\n    repositories {\r\n      flatDir {\r\n        dirs 'libs'\r\n      }\r\n    }\r\n    ```\r\n\r\n3. Add MonetaryMobileToken.aar to the `dependencies` in your app's build.gradle file.\r\n\r\n    ```\r\n    dependencies {\r\n      compile (name: 'MonetaryMobileToken', ext: 'aar')\r\n    }\r\n    ```\r\n\r\n###Include the library in your code\r\n```java\r\nimport co.monetary.mobiletoken.*;\r\n```\r\n\r\n###Implement tokenization result handler\r\n#####Implement `onActivityResult` for `MonetaryTokenizerActivity.MONETARY_TOKENIZER_REQUEST` requestCode\r\n```java\r\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data)\r\n{\r\n    if (requestCode == MonetaryTokenizerActivity.MONETARY_TOKENIZER_REQUEST)\r\n    {\r\n        if (resultCode == MonetaryTokenizerActivity.RESULT_SUCCESS)\r\n        {\r\n            // A token has been received!\r\n            MonetaryToken token = (MonetaryToken)data.getSerializableExtra(\"token\");\r\n        }\r\n        else if (resultCode == MonetaryTokenizerActivity.RESULT_ERROR)\r\n        {\r\n            // A tokenization error has occurred!\r\n            MonetaryTokenizationError error = (MonetaryTokenizationError)data.getSerializableExtra(\"error\");\r\n        }\r\n        else if (resultCode == MonetaryTokenizerActivity.RESULT_CANCELED)\r\n        {\r\n            // The user has cancelled tokenization!\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nFor the `MonetaryTokenizerActivity.RESULT_SUCCESS` resultCode, the received Intent contains a `MonetaryToken` object named `\"token\"` that contains 5 String members:  \r\n* `token`: The one-time-use token for the user-entered account data.\r\n* `brand`: The card brand of account represented by the token.\r\n* `expirationMonth`: The 2-digit expiration month of the account.\r\n* `expirationYear`: The 4-digit expiration year of the account.\r\n* `last4`: The last 4 digits of the account number.\r\n\r\nFor the `MonetaryTokenizerActivity.RESULT_ERROR` resultCode, the received Intent contains a `MonetaryTokenizationError` object named `\"error\"` that contains 2 members:  \r\n* `errorCode`: The MonetaryMobileToken error code.\r\n* `errorMessage`: The error description.\r\n\r\nThe `MonetaryTokenizationError` object's member `errorCode` is an enum of 4 possible values:\r\n* `ErrorCodes.CONNECTION_ERROR`: Failed to communicate with Monetary Token API.\r\n* `ErrorCodes.AUTHENTICATION_ERROR`: Public key authentication failed.\r\n* `ErrorCodes.VALIDATION_ERROR`: Failed to tokenize due to invalid account information.\r\n* `ErrorCodes.UNKNOWN_ERROR`: An error has occurred tokenizing the account data at the Monetary Token API.\r\n\r\n###Request a token for keyed account\r\n#####Create an Intent for `MonetaryTokenizerActivity` and provide a Monetary public key as an extra named `\"publicKey\"` then start activity for result with the Intent\r\n```java\r\nIntent tokenIntent = new Intent(this, MonetaryTokenizerActivity.class);\r\ntokenIntent.putExtra(\"publicKey\", \"[Public Key Goes Here]\");\r\nstartActivityForResult(tokenIntent, MonetaryTokenizerActivity.MONETARY_TOKENIZER_REQUEST);\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}